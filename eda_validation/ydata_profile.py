"""
YData Profiling Module
=====================

Handles EDA via ydata-profiling to generate comprehensive data analysis reports.

Usage:
    # As a module
    from eda_validation.ydata_profile import generate_profile, save_profile_report
    
    # As CLI
    python eda_validation/ydata_profile.py data/raw/sample.csv
"""

import pandas as pd
import argparse
from pathlib import Path
from typing import Optional, Dict, Any
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    from ydata_profiling import ProfileReport
    YDATA_AVAILABLE = True
except ImportError:
    logger.warning("ydata-profiling not installed. Install with: pip install ydata-profiling")
    YDATA_AVAILABLE = False


def generate_profile(
    df: pd.DataFrame, 
    title: Optional[str] = None,
    config: Optional[Dict[str, Any]] = None
) -> Optional[object]:
    """
    Generate a comprehensive EDA profile report for the given DataFrame.
    
    Args:
        df (pd.DataFrame): Input DataFrame to profile
        title (str, optional): Title for the profile report
        config (dict, optional): Configuration options for ydata-profiling
        
    Returns:
        ProfileReport object or None if ydata-profiling not available
        
    Example:
        >>> df = pd.read_csv('data.csv')
        >>> profile = generate_profile(df, title="My Dataset Profile")
    """
    if not YDATA_AVAILABLE:
        logger.error("ydata-profiling not available. Cannot generate profile.")
        return None
    
    try:
        logger.info(f"Generating profile for dataset with shape: {df.shape}")
        
        # Default configuration
        default_config = {
            "title": title or "Dataset Profile Report",
            "dataset": {
                "description": "Automated EDA report generated by Team A pipeline"
            },
            "variables": {
                "descriptions": {}
            }
        }
        
        # Merge with user config if provided
        if config:
            default_config.update(config)
            
        # Generate profile
        profile = ProfileReport(df, **default_config)
        
        logger.info("Profile generation completed successfully")
        return profile
        
    except Exception as e:
        logger.error(f"Error generating profile: {str(e)}")
        raise


def save_profile_report(
    profile: object, 
    output_path: str,
    format: str = "html"
) -> bool:
    """
    Save the profile report to file.
    
    Args:
        profile: ProfileReport object
        output_path (str): Path to save the report
        format (str): Output format ('html', 'json', 'json_minimal')
        
    Returns:
        bool: True if successful, False otherwise
        
    Example:
        >>> save_profile_report(profile, "reports/profile.html")
    """
    try:
        output_path = Path(output_path)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        logger.info(f"Saving profile report to: {output_path}")
        
        if format.lower() == "html":
            profile.to_file(output_path)
        elif format.lower() == "json":
            profile.to_file(output_path)
        elif format.lower() == "json_minimal":
            profile.to_file(output_path)
        else:
            logger.error(f"Unsupported format: {format}")
            return False
            
        logger.info("Profile report saved successfully")
        return True
        
    except Exception as e:
        logger.error(f"Error saving profile report: {str(e)}")
        return False


def profile_csv_file(
    input_path: str,
    output_path: Optional[str] = None,
    title: Optional[str] = None
) -> bool:
    """
    Complete pipeline: load CSV, generate profile, and save report.
    
    Args:
        input_path (str): Path to input CSV file
        output_path (str, optional): Path for output report
        title (str, optional): Title for the report
        
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        # Load data
        logger.info(f"Loading data from: {input_path}")
        df = pd.read_csv(input_path)
        logger.info(f"Loaded dataset with shape: {df.shape}")
        
        # Generate profile
        profile = generate_profile(df, title=title)
        if profile is None:
            return False
        
        # Determine output path
        if output_path is None:
            input_path_obj = Path(input_path)
            output_path = f"data/processed/{input_path_obj.stem}_profile.html"
        
        # Save report
        return save_profile_report(profile, output_path)
        
    except Exception as e:
        logger.error(f"Error in profile_csv_file: {str(e)}")
        return False


def main():
    """CLI entry point."""
    parser = argparse.ArgumentParser(
        description="Generate EDA profile report for CSV data"
    )
    parser.add_argument(
        "input_path",
        help="Path to input CSV file"
    )
    parser.add_argument(
        "-o", "--output",
        help="Output path for profile report (default: auto-generated)"
    )
    parser.add_argument(
        "-t", "--title",
        help="Title for the profile report"
    )
    
    args = parser.parse_args()
    
    # Run profiling
    success = profile_csv_file(
        input_path=args.input_path,
        output_path=args.output,
        title=args.title
    )
    
    if success:
        print("✅ Profile generation completed successfully")
    else:
        print("❌ Profile generation failed")
        exit(1)


if __name__ == "__main__":
    main() 